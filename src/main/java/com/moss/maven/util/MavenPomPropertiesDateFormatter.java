/**
 * Copyright (C) 2013, Moss Computing Inc.
 *
 * This file is part of maven-util.
 *
 * maven-util is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * maven-util is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with maven-util; see the file COPYING.  If not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 *
 * Linking this library statically or dynamically with other modules is
 * making a combined work based on this library.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this library with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this library, you may extend
 * this exception to your version of the library, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 */
package com.moss.maven.util;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

public class MavenPomPropertiesDateFormatter {
	/**
	 * #Generated by Maven
	 * #Wed Dec 13 19:13:58 EST 2006
	 */
	public Instant parseWhenBuilt(InputStream in) throws Exception {
		BufferedReader reader = new BufferedReader(new InputStreamReader(in));
		String firstHeaderLine = reader.readLine();
		if(!"#Generated by Maven".equals(firstHeaderLine)) throw new Exception("Unsupported pom.properties format.  Expected the first line to be \"#Generated by Maven\", but it was \"" + firstHeaderLine + "\"");
		String secondHeaderLine = reader.readLine();
		if(secondHeaderLine!=null && '#' != secondHeaderLine.charAt(0)) throw new Exception("Unsupported pom.properties format.  Expected the second line to start with a '#', but it was \"" + secondHeaderLine + "\"");
		String textualDate = secondHeaderLine.substring(1);
		
		DateTime dateTime = parseDateTime(textualDate);
		return dateTime.toInstant();
	}
	
	public DateTime parseDateTime(String mavenFormattedDateAndTime){
		
		// THE JODA PARSER DOESN'T HANDLE TIMEZONES WELL, SO WE'RE PULLING THE ZONE OUT AND PARSING IT SEPARATELY
		int length = mavenFormattedDateAndTime.length();
		String timezoneText = mavenFormattedDateAndTime.substring(length-8, length-5).trim();
		String yearText = mavenFormattedDateAndTime.substring(length-4).trim();
		String jodaParseableText = mavenFormattedDateAndTime.substring(0, length-8).trim() + " " + yearText;
		
		// PARSE THE ZONE
		DateTimeZone timeZone;
		if("EDT".equals(timezoneText)) timeZone = DateTimeZone.forID("America/New_York");
		else timeZone = DateTimeZone.forID(timezoneText);
		
		// PARSE THE STRING WITHOUT THE ZONE INFO
		DateTimeFormatter fmt = DateTimeFormat.forPattern("EEE MMM dd HH:mm:ss YYYY");
		DateTime dateTime = fmt.parseDateTime(jodaParseableText);
		
		// ADD THE ZONE BACK
		dateTime = new DateTime(dateTime.getMillis(), timeZone);
		
		return dateTime;
	}
}
